package me.zhengjie.nio.netty.udp.sever2;

import io.netty.bootstrap.Bootstrap;
import io.netty.channel.Channel;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelOption;
import io.netty.channel.ChannelPipeline;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.nio.NioDatagramChannel;
import lombok.extern.slf4j.Slf4j;
import me.zhengjie.nio.netty.udp.sever2.decoder.MessageDecoder;
import me.zhengjie.nio.netty.udp.sever2.handler.PerformanceDataTrashcanHandler;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.stereotype.Component;

@Slf4j
@Component
public class UdpServer implements ApplicationRunner {

    private final Bootstrap bootstrap;

    private final NioEventLoopGroup group;

    private Channel channel;

//    @Value("${udp2.port}")
//    private int prot;

    private UdpServer() {
        group = new NioEventLoopGroup();
        bootstrap = new Bootstrap();
        bootstrap.group(group)
                .channel(NioDatagramChannel.class)
//                .option(ChannelOption.SO_BROADCAST, true)
                .option(ChannelOption.SO_RCVBUF, 1024 * 1024 * 100)
                .handler(new ChannelInitializer<Channel>() {
                    @Override
                    protected void initChannel(Channel channel) throws Exception {
                        ChannelPipeline pipeline = channel.pipeline();
                        pipeline.addLast("MessageDecoder", new MessageDecoder());
                        pipeline.addLast("PerformanceDataTrashcanHandler", new PerformanceDataTrashcanHandler());
                    }
                });
    }

    public static UdpServer getInstance() {
        return UdpServerHolder.INSTANCE;
    }

    private static final class UdpServerHolder {
        static final UdpServer INSTANCE = new UdpServer();
    }


    private void Start() throws InterruptedException {
        try {
            channel = bootstrap.bind("0.0.0.0", 9000).sync().channel();
            log.info("Netty UdpServer start success");
            channel.closeFuture().await();
        } finally {
            group.shutdownGracefully();
        }
    }


    @Override
    public void run(ApplicationArguments args) throws Exception {
        UdpServer.getInstance().Start();
    }
}